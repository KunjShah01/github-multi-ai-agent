import gradio as gr
from agents.analyzer import AnalyzerAgent
from agents.writer import WriterAgent
from agents.vision import VisionAgent
from agents.feedback import FeedbackAgent
from agents.exporter import ExportAgent
import os
# from PIL import Image  # Removed unused import
gemini_api_key = os.getenv("GEMINI_API_KEY")
# Now you can use gemini_api_key wherever you need to authenticate with Gemini API
# Initialize agents
analyzer = AnalyzerAgent()
writer = WriterAgent()
vision = VisionAgent()
feedback = FeedbackAgent()
exporter = ExportAgent()

global_state = {}

def run_pipeline(github_url, image_file=None):
    try:
        # Step 1: Analyze repo
        analysis_msg = analyzer.run(github_url)
        global_state["analyzer_msg"] = analysis_msg

        # Step 2: Generate README draft
        readme_msg = writer.run(analysis_msg)
        global_state["writer_msg"] = readme_msg

        # Step 3: Vision (optional)
        if image_file:
            vision_msg = vision.run(image_file.name, readme_msg)
            global_state["vision_msg"] = vision_msg
            return vision_msg.content
        else:
            return readme_msg.content

    except Exception as e:
        return f"❌ Error in pipeline: {e}"

def apply_feedback(user_edit):
    prev_msg = global_state.get("vision_msg") or global_state.get("writer_msg")
    feedback_msg = feedback.run(user_edit, prev_msg)
    global_state["final_msg"] = feedback_msg
    return feedback_msg.content

def export_readme():
    final_msg = global_state.get("final_msg")
    if not final_msg:
        return "❌ No final README to export"
    export_msg = exporter.run(final_msg)
    return export_msg.content

# Gradio UI
with gr.Blocks(title="🧠 Multi-Agent README Generator") as demo:
    gr.Markdown("# 🤖 Multi-Agent GitHub README Generator\nPaste a GitHub repo and get a clean, smart README generated by AI agents.")

    with gr.Row():
        github_input = gr.Textbox(label="🔗 GitHub Repo URL", placeholder="https://github.com/user/repo", scale=3)
        image_input = gr.File(label="🖼️ Optional Diagram", file_types=["image"], scale=1)

    generate_btn = gr.Button("🚀 Generate README")
    readme_output = gr.Textbox(label="📄 Generated README", lines=25)

    with gr.Row():
        feedback_box = gr.Textbox(label="✏️ Provide Feedback or Edit README")
        feedback_btn = gr.Button("🔁 Regenerate with Feedback")

    export_btn = gr.Button("💾 Export Final README")
    export_output = gr.Textbox(label="📂 Export Status")

    generate_btn.click(fn=run_pipeline, inputs=[github_input, image_input], outputs=readme_output)
    feedback_btn.click(fn=apply_feedback, inputs=feedback_box, outputs=readme_output)
    export_btn.click(fn=export_readme, outputs=export_output)
from agents.push_to_github import GitHubPushAgent
import os

github_token = os.getenv("GITHUB_TOKEN")
pusher = GitHubPushAgent(github_token)

def push_to_github_ui(github_url):
    final_msg = global_state.get("final_msg")
    if not final_msg:
        return "❌ No final README to push"
    response = pusher.run(github_url, final_msg)
    return response.content

push_btn = gr.Button("🚀 Push to GitHub")
push_output = gr.Textbox(label="🔐 GitHub Push Status")

push_btn.click(fn=push_to_github_ui, inputs=github_input, outputs=push_output)

# Launch
if __name__ == "__main__":
    demo.launch()
